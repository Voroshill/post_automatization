#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
–ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≥–¥–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import asyncio
import sys
import os
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('/app')  # –ü—É—Ç—å –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
sys.path.append('.')     # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å

try:
    from app.core.config.settings import settings
    from app.infrastructure.external.ldap_service import LDAPService
    from app.infrastructure.external.exchange_service import ExchangeService
    from app.infrastructure.external.winrm_service import WinRMService
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


class RemoteIntegrationCheck:
    def __init__(self):
        self.results = {}
        self.start_time = datetime.now()
        
    def log(self, message: str, level: str = "INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] [{level}] {message}")
    
    async def check_ldap_connection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Active Directory"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ LDAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            ldap_service = LDAPService()
            conn = await ldap_service._get_connection()
            
            if conn and conn.bound:
                # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                conn.search(
                    'DC=central,DC=st-ing,DC=com',
                    '(objectClass=user)',
                    attributes=['sAMAccountName'],
                    size_limit=5
                )
                
                user_count = len(conn.entries)
                
                self.log(f"‚úÖ LDAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return {
                    "status": "success",
                    "server": settings.ad_server,
                    "domain": settings.ad_domain,
                    "users_found": user_count,
                    "connection_bound": conn.bound
                }
            else:
                self.log("‚ùå LDAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "ERROR")
                return {
                    "status": "failed",
                    "error": "Connection not bound"
                }
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ LDAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "ERROR")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def check_exchange_connection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange Server"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Exchange –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            exchange_service = ExchangeService()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ WinRM
            test_script = f"""
            try {{
                Write-Host "Testing Exchange connection..."
                $ErrorActionPreference = 'Stop'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Exchange —Å–µ—Ä–≤–µ—Ä–∞
                $exchangeServer = "{settings.exchange_server}"
                $testConnection = Test-NetConnection -ComputerName $exchangeServer -Port 80 -InformationLevel Quiet
                
                if ($testConnection) {{
                    Write-Host "SUCCESS: Exchange server {settings.exchange_server} is reachable"
                }} else {{
                    Write-Host "WARNING: Exchange server {settings.exchange_server} is not reachable on port 80"
                }}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º PowerShell –º–æ–¥—É–ª—å Exchange
                try {{
                    Import-Module -Name ExchangeOnlineManagement -ErrorAction SilentlyContinue
                    Write-Host "SUCCESS: Exchange PowerShell module available"
                }} catch {{
                    Write-Host "INFO: Exchange PowerShell module not available (normal for remote execution)"
                }}
                
            }} catch {{
                Write-Host "ERROR: $($_.Exception.Message)"
            }}
            """
            
            result = await exchange_service.winrm_service.execute_powershell(test_script)
            
            if result["success"] and "SUCCESS" in result["stdout"]:
                self.log("‚úÖ Exchange —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                return {
                    "status": "success",
                    "server": settings.exchange_server,
                    "database": settings.exchange_database,
                    "output": result["stdout"]
                }
            else:
                self.log(f"‚ö†Ô∏è Exchange –ø—Ä–æ–≤–µ—Ä–∫–∞: {result.get('stdout', 'No output')}", "WARNING")
                return {
                    "status": "warning",
                    "server": settings.exchange_server,
                    "output": result.get('stdout', 'No output'),
                    "error": result.get('stderr', 'No error details')
                }
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ Exchange –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "ERROR")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def check_smtp_connection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
            if not settings.smtp_server or not settings.smtp_username:
                self.log("‚ùå SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", "ERROR")
                return {
                    "status": "failed",
                    "error": "SMTP settings not configured"
                }
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
            test_script = f"""
            try {{
                $SMTPServer = "{settings.smtp_server}"
                $SMTPPort = {settings.smtp_port}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SMTP —Å–µ—Ä–≤–µ—Ä–∞
                $testConnection = Test-NetConnection -ComputerName $SMTPServer -Port $SMTPPort -InformationLevel Quiet
                
                if ($testConnection) {{
                    Write-Host "SUCCESS: SMTP server {settings.smtp_server}:{settings.smtp_port} is reachable"
                }} else {{
                    Write-Host "WARNING: SMTP server {settings.smtp_server}:{settings.smtp_port} is not reachable"
                }}
                
            }} catch {{
                Write-Host "ERROR: $($_.Exception.Message)"
            }}
            """
            
            winrm_service = WinRMService()
            result = await winrm_service.execute_powershell(test_script)
            
            if result["success"] and "SUCCESS" in result["stdout"]:
                self.log("‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                return {
                    "status": "success",
                    "server": settings.smtp_server,
                    "port": settings.smtp_port,
                    "username": settings.smtp_username
                }
            else:
                self.log(f"‚ö†Ô∏è SMTP –ø—Ä–æ–≤–µ—Ä–∫–∞: {result.get('stdout', 'No output')}", "WARNING")
                return {
                    "status": "warning",
                    "server": settings.smtp_server,
                    "port": settings.smtp_port,
                    "output": result.get('stdout', 'No output')
                }
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ SMTP –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", "ERROR")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def check_winrm_connection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            winrm_service = WinRMService()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
            test_script = """
            try {
                Write-Host "SUCCESS: WinRM connection established"
                Write-Host "Computer: $env:COMPUTERNAME"
                Write-Host "User: $env:USERNAME"
                Write-Host "Date: $(Get-Date)"
            } catch {
                Write-Host "ERROR: $($_.Exception.Message)"
            }
            """
            
            result = await winrm_service.execute_powershell(test_script)
            
            if result["success"] and "SUCCESS" in result["stdout"]:
                self.log("‚úÖ WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return {
                    "status": "success",
                    "server": winrm_service.server,
                    "port": winrm_service.port,
                    "output": result["stdout"]
                }
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.get('stderr', 'Unknown error')}", "ERROR")
                return {
                    "status": "failed",
                    "error": result.get('stderr', 'Unknown error')
                }
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", "ERROR")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def check_filesystem_access(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ...")
        
        try:
            winrm_service = WinRMService()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏
            base_path = "\\\\datastorage\\Storage\\06_–°–¢–ò\\–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"
            
            test_script = f"""
            try {{
                $basePath = "{base_path}"
                Write-Host "Checking path: $basePath"
                
                if (Test-Path $basePath) {{
                    $items = Get-ChildItem $basePath -ErrorAction SilentlyContinue
                    Write-Host "SUCCESS: Path accessible, $($items.Count) items found"
                }} else {{
                    Write-Host "WARNING: Base path not accessible: $basePath"
                    Write-Host "Attempting to create directory structure..."
                    
                    try {{
                        New-Item -ItemType Directory -Path $basePath -Force
                        Write-Host "SUCCESS: Directory created successfully"
                    }} catch {{
                        Write-Host "ERROR: Cannot create directory: $($_.Exception.Message)"
                    }}
                }}
            }} catch {{
                Write-Host "ERROR: $($_.Exception.Message)"
            }}
            """
            
            result = await winrm_service.execute_powershell(test_script)
            
            if result["success"] and "SUCCESS" in result["stdout"]:
                self.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {
                    "status": "success",
                    "base_path": base_path,
                    "output": result["stdout"]
                }
            else:
                self.log(f"‚ö†Ô∏è –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {result.get('stdout', 'No output')}", "WARNING")
                return {
                    "status": "warning",
                    "base_path": base_path,
                    "output": result.get('stdout', 'No output'),
                    "error": result.get('stderr', 'No error details')
                }
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {str(e)}", "ERROR")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def check_database_connection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from app.infrastructure.database.database import get_db
            from sqlalchemy import text
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            db = next(get_db())
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            result = db.execute(text("SELECT 1 as test"))
            test_value = result.fetchone()[0]
            
            if test_value == 1:
                self.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                return {
                    "status": "success",
                    "database_url": settings.database_url,
                    "test_query": "passed"
                }
            else:
                self.log("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î", "ERROR")
                return {
                    "status": "failed",
                    "error": "Test query failed"
                }
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}", "ERROR")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        self.log("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
        self.log("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.results["database"] = await self.check_database_connection()
        self.log("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ LDAP
        self.results["ldap"] = await self.check_ldap_connection()
        self.log("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Exchange
        self.results["exchange"] = await self.check_exchange_connection()
        self.log("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP
        self.results["smtp"] = await self.check_smtp_connection()
        self.log("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ WinRM
        self.results["winrm"] = await self.check_winrm_connection()
        self.log("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.results["filesystem"] = await self.check_filesystem_access()
        self.log("-" * 40)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        self.log("=" * 60)
        
        total_checks = len(self.results)
        successful_checks = sum(1 for result in self.results.values() if result["status"] == "success")
        warning_checks = sum(1 for result in self.results.values() if result["status"] == "warning")
        failed_checks = sum(1 for result in self.results.values() if result["status"] == "failed")
        
        self.log(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}")
        self.log(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_checks}")
        self.log(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_checks}")
        self.log(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_checks}")
        self.log("")
        
        for service, result in self.results.items():
            if result["status"] == "success":
                status_icon = "‚úÖ"
            elif result["status"] == "warning":
                status_icon = "‚ö†Ô∏è"
            else:
                status_icon = "‚ùå"
                
            self.log(f"{status_icon} {service.upper()}: {result['status']}")
            
            if result["status"] == "failed":
                self.log(f"   –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
            elif result["status"] == "warning":
                self.log(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {result.get('error', 'Check details')}")
        
        duration = datetime.now() - self.start_time
        self.log("")
        self.log(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.total_seconds():.2f} —Å–µ–∫—É–Ω–¥")
        self.log("=" * 60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π - –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
    print("=" * 60)
    
    diagnostic = RemoteIntegrationCheck()
    await diagnostic.run_all_checks()


if __name__ == "__main__":
    asyncio.run(main())
